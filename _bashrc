printf '\033[2 q'

# vim: set filetype=sh:
. $HOME/.dotfiles/os.sh

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;
*)
  ;;
esac

# enable programmable completion features
has_git_prompt=no
if is_mac; then
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
  fi
  git_prompt=$(brew --prefix)/etc/bash_completion.d/git-prompt.sh
  if [ -f $git_prompt ]; then
    . $git_prompt
    has_git_prompt=yes
  fi
elif ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
  bash_completion_dir=/etc/bash_completion.d
  if [ -f ${bash_completion_dir}/git-prompt ];then
    . ${bash_completion_dir}/git-prompt
    has_git_prompt=yes
  fi
fi

# git
if [ $has_git_prompt = 'yes' ];then
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWUPSTREAM=1
  GIT_PS1_SHOWUNTRACKEDFILES=
  GIT_PS1_SHOWSTASHSTATE=1

  PS1='\[\033[1;32m\]\u\[\033[00m\]:\[\033[1;34m\]\W\[\033[1;31m\]$(__git_ps1)\[\033[00m\] \$ '
fi

if [ -f ~/.bash_alias ]; then
  source ~/.bash_alias
fi

for bashrc in "$HOME/.bashrc_*"; do
  if [ -f $bashrc ]; then
    . $bashrc
  fi
done

# ghq/go style development
function gcd {
  local repo="$(ghq list | peco)"
  if [ ! -z "$repo" ]; then
    for root in $(ghq root --all); do
      if [ -d "$root/$repo" ]; then
        cd "$root/$repo"
      fi
    done
  fi
}

# peco
function pcd {
  local path="$(find * -not -path '*/\.*' -type d | peco)"
  if [ ! -z "$path" ]; then
    cd "$path"
  fi
}

function pvi {
  local path="$(find * | peco)"
  if [ ! -z "$path" ]; then
    vi "$path"
  fi
}

function pssh {
  local host="$(grep -E '^Host' ~/.ssh/config | grep -v '*' | awk '{print $2}' | peco)"
  if [ ! -z "$host" ]; then
    ssh "$host"
  fi
}

function phistory {
  declare l=$(HISTTIMEFORMAT= history | sort -k1,1nr | perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }' | peco --query "$READLINE_LINE")
  READLINE_LINE="$l"
  READLINE_POINT=${#l}
}

bind -x '"\C-r": phistory'

function kubens() {
    kns=$(kubectl get namespaces | peco --initial-index=1 --prompt='set kubectl namespace > ' | awk '{print $1}')
    if [ -n "$kns" ]; then
      kubectl config set-context $(kubectl config current-context) --namespace=$kns
    fi
}

function kubectx() {
    kcontext=$(kubectl config get-contexts | peco --initial-index=1 --prompt='kubectl config use-context > ' |  sed -e 's/^\*//' | awk '{print $1}')
    if [ -n "$kcontext" ]; then
        kubectl config use-context $kcontext
    fi
}

# tmux
if [ -z "$TMUX" -a -z "$SSH_CONECTION" ]; then
  if tmux has-session > /dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
    tmux attach
  else
    tmux new-session
  fi
fi
